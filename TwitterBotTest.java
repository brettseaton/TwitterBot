package org.cis1200;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.time.Duration;

import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/** Tests for TwitterBot class */
public class TwitterBotTest {

    /*
     * This tests whether your TwitterBot class itself is written correctly
     *
     * This test operates very similarly to our MarkovChain tests in its use of
     * `fixDistribution`, so make sure you know how to test MarkovChain before
     * testing this!
     */
    @Test
    public void simpleTwitterBotTest() {
        List<String> desiredTweet = new ArrayList<>(
                Arrays.asList(
                        "this", "comes", "from", "data", "with", "no", "duplicate", "words", ".",
                        "the", "end", "should", "come", "."
                )
        );
        String words = "0, The end should come here.\n"
                + "1, This comes from data with no duplicate words!";
        StringReader sr = new StringReader(words);
        BufferedReader bufferedRead = new BufferedReader(sr);
        TwitterBot t = new TwitterBot(bufferedRead, 1);
        t.fixDistribution(desiredTweet);

        String expected = "this comes from data with no duplicate words. the end should come.";
        String actual = TweetParser.replacePunctuation(t.generateTweet(12));
        assertEquals(expected, actual);
    }

    /*
     * This is the empty file test case.
     *
     * When your CSV file is empty, your program should create an empty MarkovChain.
     * An empty tweet should be generated by your bot.
     * No exceptions should be thrown and your program should not go into an
     * infinite loop!
     */
    @Test
    public void emptyFileCreatesEmptyTweet() {
        // Checks that your program does not go into an infinite loop
        assertTimeoutPreemptively(
                Duration.ofSeconds(10), () -> {
                    // No exceptions are thrown if file is empty
                    TwitterBot tweetRobot = new TwitterBot(
                            FileLineIterator.fileToReader("./files/empty.csv"), 2
                    );
                    // Checks that the bot creates an empty tweet
                    assertEquals(0, tweetRobot.generateTweet(10).length());
                }
        );
    }

    /* **** ****** **** WRITE YOUR TESTS BELOW THIS LINE **** ****** **** */
    public void testUsingNegativesCloseToZero() {
        StringReader stringRead = new StringReader("");
        BufferedReader bufferedRead = new BufferedReader(stringRead);
        TwitterBot tweetRobot = new TwitterBot(bufferedRead, 0);
        assertThrows(IllegalArgumentException.class, () -> {
            TweetParser.replacePunctuation(tweetRobot.generateTweet(-1));
        });
    }

    @Test
    public void testNothingMade() {
        String w = " @asdfasdfj;lkj;lj;l $$. #$$  \n" + "@ja $$* ;; $$";
        StringReader stringRead = new StringReader(w);
        BufferedReader bufferedRead = new BufferedReader(stringRead);
        TwitterBot tweetRobot = new TwitterBot(bufferedRead, 1);
        String expectation = "";
        String result = TweetParser.replacePunctuation(tweetRobot.generateTweet(10));
        assertEquals(expectation, result);
    }
    @Test
    public void testLimitingTheNumberOfWordsAskedForAndCreated() {
        List<String> desiredTweet = new ArrayList<>(
                Arrays.asList(
                        "yes", "hello", "hi", "not", "today", "chuck", "friends", "soccer", "."));
        String w = "0, This is the end.\n"
                + "1, Yes hello hi not today chuck friends soccer!";
        StringReader stringRead = new StringReader(w);
        BufferedReader bufferedRead = new BufferedReader(stringRead);
        TwitterBot tweetRobot = new TwitterBot(bufferedRead, 1);
        tweetRobot.fixDistribution(desiredTweet);

        String expectation = "yes hello hi not.";
        String result = TweetParser.replacePunctuation(tweetRobot.generateTweet(4));
        assertEquals(expectation, result);
    }
    @Test
    public void testNothingMadeMorOptions() {
        String w = " @brett JJUP;se  %^ll90-  \n" + ";lkdkd f f ^%$###";
        StringReader stringRead = new StringReader(w);
        BufferedReader bufferedRead = new BufferedReader(stringRead);
        TwitterBot tweetRobot = new TwitterBot(bufferedRead, 1);
        String expectation = "";
        String result = TweetParser.replacePunctuation(tweetRobot.generateTweet(10));
        assertEquals(expectation, result);
    }
    public void testUsingNegativesForCheckingInvalidInput() {
        StringReader stringRead = new StringReader("");
        BufferedReader bufferedRead = new BufferedReader(stringRead);
        TwitterBot tweetRobot = new TwitterBot(bufferedRead, 0);
        assertThrows(IllegalArgumentException.class, () -> {
            TweetParser.replacePunctuation(tweetRobot.generateTweet(-5));
        });
    }

    @Test
    public void testNoWords() {
        StringReader stringRead = new StringReader("");
        BufferedReader bufferedRead = new BufferedReader(stringRead);
        TwitterBot tweetRobot = new TwitterBot(bufferedRead, 0);
        assertEquals("", tweetRobot.generateTweet(0));
    }
    
}
